#!/usr/bin/env python3

""" X-K8S Installer

Usage: 
    ./x-k8s install
    ./x-k8s reset
    ./x-k8s list inventory [--vars]
    ./x-k8s ( -h | --help)
    ./x-k8s ( -v | --version)

Examples:
    ./x-k8s install                     Install x-k8s.
    ./x-k8s reset                       Reset host environment listed in inventory.
    ./x-k8s list inventory              List hosts inventory.
    ./x-k8s list inventory --vars       List hosts inventory with all variables.
    ./x-k8s -h                          
    ./x-k8s --help
    ./x-k8s -v
    ./x-k8s --version

Options:
    -h, --help
    -v, --version
    --vars

"""

from docopt import docopt
from pathlib import Path
import configparser

basePath = str(Path().absolute())
inventoryPath = basePath+'/kubespray/inventory/mycluster/hosts.ini'
playbookPath = basePath+'/kubespray/cluster.yml'
extraVarPath = basePath+'/kubespray/extraVars.yml'
resetPath = basePath+'/kubespray/reset.yml'

def install():
    mycli = getattr(__import__("ansible.cli.playbook", fromlist=['PlaybookCLI']), 'PlaybookCLI')
    args = ['ansible-playbook', '-i', inventoryPath, 
            playbookPath, 
            "-e", "@"+extraVarPath, 
            "--become-user=root"]
    cli = mycli(args)
    cli.parse()
    exitCode = cli.run()
    return exitCode

def reset():
    mycli = getattr(__import__("ansible.cli.playbook", fromlist=['PlaybookCLI']), 'PlaybookCLI')
    args = ['ansible-playbook', '-i', inventoryPath, resetPath, "--become-user=root"]
    cli = mycli(args)
    cli.parse()
    exitCode = cli.run()
    return exitCode

def listInventory():
    global arg
    mycli = getattr(__import__("ansible.cli.inventory", fromlist=['InventoryCLI']), 'InventoryCLI')
    args = ['ansible-inventory', '-i', inventoryPath, "--graph"]
    if '--vars' in arg and arg['--vars']:
        args.append("--vars")
    cli = mycli(args)
    cli.parse()
    exitCode = cli.run()
    return exitCode


def main():
    global arg
    if 'install' in arg and arg['install']:
        install()
    elif 'reset' in arg and arg['reset']:
        reset()
    elif 'list' in arg and arg['list']:
        if 'inventory' in arg and arg['inventory']:
            listInventory()
    else:
        return





if __name__ == "__main__":
    arg = docopt(__doc__, version='v1.0.1')
    main()